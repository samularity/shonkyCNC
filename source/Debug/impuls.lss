
impuls.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000098e  00000a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000098e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  00800112  00800112  00000a34  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000f0  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000957  00000000  00000000  000012b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000451  00000000  00000000  00001c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000607  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e8  00000000  00000000  00002668  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000033f  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000723  00000000  00000000  00002b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  000032b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_25>
  68:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_26>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_41>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee e8       	ldi	r30, 0x8E	; 142
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 31       	cpi	r26, 0x12	; 18
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a2 e1       	ldi	r26, 0x12	; 18
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a2 38       	cpi	r26, 0x82	; 130
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 af 03 	call	0x75e	; 0x75e <main>
  e2:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <readADC>:
uint16_t readADC( uint8_t adc_channel)
{
	uint32_t adc_Value = 0;
	
	// ADC deaktiviern
	ADCSRA &= ~(1<<ADEN); 
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	9f 77       	andi	r25, 0x7F	; 127
  f2:	90 83       	st	Z, r25
	ADCSRA &= ~(1<<ADSC); 
  f4:	90 81       	ld	r25, Z
  f6:	9f 7b       	andi	r25, 0xBF	; 191
  f8:	90 83       	st	Z, r25

	switch (adc_channel) //wähle adc kanal
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	09 f4       	brne	.+2      	; 0x100 <readADC+0x16>
  fe:	75 c0       	rjmp	.+234    	; 0x1ea <readADC+0x100>
 100:	78 f4       	brcc	.+30     	; 0x120 <readADC+0x36>
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	d1 f1       	breq	.+116    	; 0x17a <readADC+0x90>
 106:	30 f4       	brcc	.+12     	; 0x114 <readADC+0x2a>
 108:	88 23       	and	r24, r24
 10a:	f1 f0       	breq	.+60     	; 0x148 <readADC+0x5e>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	09 f0       	breq	.+2      	; 0x112 <readADC+0x28>
 110:	ee c0       	rjmp	.+476    	; 0x2ee <readADC+0x204>
 112:	25 c0       	rjmp	.+74     	; 0x15e <readADC+0x74>
 114:	86 30       	cpi	r24, 0x06	; 6
 116:	09 f4       	brne	.+2      	; 0x11a <readADC+0x30>
 118:	4c c0       	rjmp	.+152    	; 0x1b2 <readADC+0xc8>
 11a:	08 f0       	brcs	.+2      	; 0x11e <readADC+0x34>
 11c:	58 c0       	rjmp	.+176    	; 0x1ce <readADC+0xe4>
 11e:	3b c0       	rjmp	.+118    	; 0x196 <readADC+0xac>
 120:	8b 30       	cpi	r24, 0x0B	; 11
 122:	09 f4       	brne	.+2      	; 0x126 <readADC+0x3c>
 124:	89 c0       	rjmp	.+274    	; 0x238 <readADC+0x14e>
 126:	38 f4       	brcc	.+14     	; 0x136 <readADC+0x4c>
 128:	89 30       	cpi	r24, 0x09	; 9
 12a:	09 f4       	brne	.+2      	; 0x12e <readADC+0x44>
 12c:	69 c0       	rjmp	.+210    	; 0x200 <readADC+0x116>
 12e:	8a 30       	cpi	r24, 0x0A	; 10
 130:	09 f0       	breq	.+2      	; 0x134 <readADC+0x4a>
 132:	dd c0       	rjmp	.+442    	; 0x2ee <readADC+0x204>
 134:	73 c0       	rjmp	.+230    	; 0x21c <readADC+0x132>
 136:	8d 30       	cpi	r24, 0x0D	; 13
 138:	09 f4       	brne	.+2      	; 0x13c <readADC+0x52>
 13a:	9a c0       	rjmp	.+308    	; 0x270 <readADC+0x186>
 13c:	08 f4       	brcc	.+2      	; 0x140 <readADC+0x56>
 13e:	8a c0       	rjmp	.+276    	; 0x254 <readADC+0x16a>
 140:	84 31       	cpi	r24, 0x14	; 20
 142:	09 f0       	breq	.+2      	; 0x146 <readADC+0x5c>
 144:	d4 c0       	rjmp	.+424    	; 0x2ee <readADC+0x204>
 146:	a2 c0       	rjmp	.+324    	; 0x28c <readADC+0x1a2>
		{
		case 0:  adc_ch0; break;
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 7e       	andi	r24, 0xE0	; 224
 150:	80 83       	st	Z, r24
 152:	eb e7       	ldi	r30, 0x7B	; 123
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	80 83       	st	Z, r24
 15c:	a4 c0       	rjmp	.+328    	; 0x2a6 <readADC+0x1bc>
		case 1:  adc_ch1; break;
 15e:	ec e7       	ldi	r30, 0x7C	; 124
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	81 7e       	andi	r24, 0xE1	; 225
 166:	80 83       	st	Z, r24
 168:	80 81       	ld	r24, Z
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	80 83       	st	Z, r24
 16e:	eb e7       	ldi	r30, 0x7B	; 123
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	80 83       	st	Z, r24
 178:	96 c0       	rjmp	.+300    	; 0x2a6 <readADC+0x1bc>
		case 4:  adc_ch4; break;
 17a:	ec e7       	ldi	r30, 0x7C	; 124
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	84 7e       	andi	r24, 0xE4	; 228
 182:	80 83       	st	Z, r24
 184:	80 81       	ld	r24, Z
 186:	84 60       	ori	r24, 0x04	; 4
 188:	80 83       	st	Z, r24
 18a:	eb e7       	ldi	r30, 0x7B	; 123
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	80 83       	st	Z, r24
 194:	88 c0       	rjmp	.+272    	; 0x2a6 <readADC+0x1bc>
		case 5:  adc_ch5; break;
 196:	ec e7       	ldi	r30, 0x7C	; 124
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	85 60       	ori	r24, 0x05	; 5
 19e:	80 83       	st	Z, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	85 7e       	andi	r24, 0xE5	; 229
 1a4:	80 83       	st	Z, r24
 1a6:	eb e7       	ldi	r30, 0x7B	; 123
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8f 7d       	andi	r24, 0xDF	; 223
 1ae:	80 83       	st	Z, r24
 1b0:	7a c0       	rjmp	.+244    	; 0x2a6 <readADC+0x1bc>
		case 6:  adc_ch6; break;
 1b2:	ec e7       	ldi	r30, 0x7C	; 124
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	86 60       	ori	r24, 0x06	; 6
 1ba:	80 83       	st	Z, r24
 1bc:	80 81       	ld	r24, Z
 1be:	86 7e       	andi	r24, 0xE6	; 230
 1c0:	80 83       	st	Z, r24
 1c2:	eb e7       	ldi	r30, 0x7B	; 123
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	8f 7d       	andi	r24, 0xDF	; 223
 1ca:	80 83       	st	Z, r24
 1cc:	6c c0       	rjmp	.+216    	; 0x2a6 <readADC+0x1bc>
		case 7:  adc_ch7; break;
 1ce:	ec e7       	ldi	r30, 0x7C	; 124
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	87 60       	ori	r24, 0x07	; 7
 1d6:	80 83       	st	Z, r24
 1d8:	80 81       	ld	r24, Z
 1da:	87 7e       	andi	r24, 0xE7	; 231
 1dc:	80 83       	st	Z, r24
 1de:	eb e7       	ldi	r30, 0x7B	; 123
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8f 7d       	andi	r24, 0xDF	; 223
 1e6:	80 83       	st	Z, r24
 1e8:	5e c0       	rjmp	.+188    	; 0x2a6 <readADC+0x1bc>
		case 8:  adc_ch8; break;
 1ea:	ec e7       	ldi	r30, 0x7C	; 124
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 7e       	andi	r24, 0xE0	; 224
 1f2:	80 83       	st	Z, r24
 1f4:	eb e7       	ldi	r30, 0x7B	; 123
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	80 83       	st	Z, r24
 1fe:	53 c0       	rjmp	.+166    	; 0x2a6 <readADC+0x1bc>
		case 9:  adc_ch9; break;
 200:	ec e7       	ldi	r30, 0x7C	; 124
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	81 7e       	andi	r24, 0xE1	; 225
 208:	80 83       	st	Z, r24
 20a:	80 81       	ld	r24, Z
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	80 83       	st	Z, r24
 210:	eb e7       	ldi	r30, 0x7B	; 123
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 62       	ori	r24, 0x20	; 32
 218:	80 83       	st	Z, r24
 21a:	45 c0       	rjmp	.+138    	; 0x2a6 <readADC+0x1bc>
		case 10:  adc_ch10; break;
 21c:	ec e7       	ldi	r30, 0x7C	; 124
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	82 7e       	andi	r24, 0xE2	; 226
 224:	80 83       	st	Z, r24
 226:	80 81       	ld	r24, Z
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	80 83       	st	Z, r24
 22c:	eb e7       	ldi	r30, 0x7B	; 123
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 62       	ori	r24, 0x20	; 32
 234:	80 83       	st	Z, r24
 236:	37 c0       	rjmp	.+110    	; 0x2a6 <readADC+0x1bc>
		case 11:  adc_ch11; break;
 238:	ec e7       	ldi	r30, 0x7C	; 124
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	83 7e       	andi	r24, 0xE3	; 227
 240:	80 83       	st	Z, r24
 242:	80 81       	ld	r24, Z
 244:	83 60       	ori	r24, 0x03	; 3
 246:	80 83       	st	Z, r24
 248:	eb e7       	ldi	r30, 0x7B	; 123
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	80 62       	ori	r24, 0x20	; 32
 250:	80 83       	st	Z, r24
 252:	29 c0       	rjmp	.+82     	; 0x2a6 <readADC+0x1bc>
		case 12:  adc_ch12; break;
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	84 7e       	andi	r24, 0xE4	; 228
 25c:	80 83       	st	Z, r24
 25e:	80 81       	ld	r24, Z
 260:	84 60       	ori	r24, 0x04	; 4
 262:	80 83       	st	Z, r24
 264:	eb e7       	ldi	r30, 0x7B	; 123
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	80 62       	ori	r24, 0x20	; 32
 26c:	80 83       	st	Z, r24
 26e:	1b c0       	rjmp	.+54     	; 0x2a6 <readADC+0x1bc>
		case 13:  adc_ch13; break;
 270:	ec e7       	ldi	r30, 0x7C	; 124
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	85 7e       	andi	r24, 0xE5	; 229
 278:	80 83       	st	Z, r24
 27a:	80 81       	ld	r24, Z
 27c:	85 60       	ori	r24, 0x05	; 5
 27e:	80 83       	st	Z, r24
 280:	eb e7       	ldi	r30, 0x7B	; 123
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	80 62       	ori	r24, 0x20	; 32
 288:	80 83       	st	Z, r24
 28a:	0d c0       	rjmp	.+26     	; 0x2a6 <readADC+0x1bc>
		case 20: adc_temp; break;
 28c:	ec e7       	ldi	r30, 0x7C	; 124
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	87 7e       	andi	r24, 0xE7	; 231
 294:	80 83       	st	Z, r24
 296:	80 81       	ld	r24, Z
 298:	87 60       	ori	r24, 0x07	; 7
 29a:	80 83       	st	Z, r24
 29c:	eb e7       	ldi	r30, 0x7B	; 123
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	80 62       	ori	r24, 0x20	; 32
 2a4:	80 83       	st	Z, r24
		default:  {return (0);}	//fehler
		}

	ADCSRA |= (1<<ADEN); // ADC einschalten
 2a6:	ea e7       	ldi	r30, 0x7A	; 122
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // und initialisiern
 2b0:	80 81       	ld	r24, Z
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC)); //test messung 'leer'
 2b6:	80 81       	ld	r24, Z
 2b8:	86 fd       	sbrc	r24, 6
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <readADC+0x1cc>

	// ergebniss löschen
	ADCH = 0x00;
 2bc:	10 92 79 00 	sts	0x0079, r1
	ADCL = 0x00;
 2c0:	10 92 78 00 	sts	0x0078, r1
 2c4:	28 e0       	ldi	r18, 0x08	; 8

	// mittel aus 8 werten
		for (uint8_t g = 0; g < 8; g++) {
  			ADCSRA |= (1<<ADSC); //messung beginnen
 2c6:	ea e7       	ldi	r30, 0x7A	; 122
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
			while(ADCSRA & (1 << ADSC)); // warten bis abgeschlossen
			adc_Value = adc_Value + ( ADC ); // wert speichern
 2ca:	a8 e7       	ldi	r26, 0x78	; 120
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
	ADCH = 0x00;
	ADCL = 0x00;

	// mittel aus 8 werten
		for (uint8_t g = 0; g < 8; g++) {
  			ADCSRA |= (1<<ADSC); //messung beginnen
 2ce:	80 81       	ld	r24, Z
 2d0:	80 64       	ori	r24, 0x40	; 64
 2d2:	80 83       	st	Z, r24
			while(ADCSRA & (1 << ADSC)); // warten bis abgeschlossen
 2d4:	80 81       	ld	r24, Z
 2d6:	86 fd       	sbrc	r24, 6
 2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <readADC+0x1ea>
			adc_Value = adc_Value + ( ADC ); // wert speichern
 2da:	8d 91       	ld	r24, X+
 2dc:	9c 91       	ld	r25, X
 2de:	11 97       	sbiw	r26, 0x01	; 1
 2e0:	21 50       	subi	r18, 0x01	; 1
	// ergebniss löschen
	ADCH = 0x00;
	ADCL = 0x00;

	// mittel aus 8 werten
		for (uint8_t g = 0; g < 8; g++) {
 2e2:	a9 f7       	brne	.-22     	; 0x2ce <readADC+0x1e4>
  			ADCSRA |= (1<<ADSC); //messung beginnen
			while(ADCSRA & (1 << ADSC)); // warten bis abgeschlossen
			adc_Value = adc_Value + ( ADC ); // wert speichern
			}	  
    adc_Value = adc_Value /8 ; //mittel aus den 8 werten
	return ADC; //wert zurückgeben
 2e4:	20 91 78 00 	lds	r18, 0x0078
 2e8:	30 91 79 00 	lds	r19, 0x0079
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <readADC+0x208>
		case 10:  adc_ch10; break;
		case 11:  adc_ch11; break;
		case 12:  adc_ch12; break;
		case 13:  adc_ch13; break;
		case 20: adc_temp; break;
		default:  {return (0);}	//fehler
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
			while(ADCSRA & (1 << ADSC)); // warten bis abgeschlossen
			adc_Value = adc_Value + ( ADC ); // wert speichern
			}	  
    adc_Value = adc_Value /8 ; //mittel aus den 8 werten
	return ADC; //wert zurückgeben
}
 2f2:	82 2f       	mov	r24, r18
 2f4:	93 2f       	mov	r25, r19
 2f6:	08 95       	ret

000002f8 <adc_init>:

void adc_init () // adc initialisierung
{
	//internal_vref
	external_vref // siehe adc.h
 2f8:	ec e7       	ldi	r30, 0x7C	; 124
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	8f 7b       	andi	r24, 0xBF	; 191
 300:	80 83       	st	Z, r24
 302:	80 81       	ld	r24, Z
 304:	8f 77       	andi	r24, 0x7F	; 127
 306:	80 83       	st	Z, r24
	DDRF &= ~(( 1 << PF0 )|( 1 << PF1 ))   ;  // PIN PD 4,6,7 auf eingang  
 308:	80 b3       	in	r24, 0x10	; 16
 30a:	8c 7f       	andi	r24, 0xFC	; 252
 30c:	80 bb       	out	0x10, r24	; 16
	ADMUX &= ~(1<<ADLAR); //auf oder abrunden
 30e:	80 81       	ld	r24, Z
 310:	8f 7d       	andi	r24, 0xDF	; 223
 312:	80 83       	st	Z, r24
	adc_ch10 //channel 10 zum einstellen
 314:	80 81       	ld	r24, Z
 316:	82 7e       	andi	r24, 0xE2	; 226
 318:	80 83       	st	Z, r24
 31a:	80 81       	ld	r24, Z
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	80 83       	st	Z, r24
 320:	ab e7       	ldi	r26, 0x7B	; 123
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	8c 91       	ld	r24, X
 326:	80 62       	ori	r24, 0x20	; 32
 328:	8c 93       	st	X, r24
	ADCSRA |= ((1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0)); //Prescaler auf 125KHz
 32a:	ea e7       	ldi	r30, 0x7A	; 122
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	87 60       	ori	r24, 0x07	; 7
 332:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADATE); //kein trigger mode
 334:	80 81       	ld	r24, Z
 336:	8f 7d       	andi	r24, 0xDF	; 223
 338:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADHSM);//high speed mode
 33a:	8c 91       	ld	r24, X
 33c:	80 68       	ori	r24, 0x80	; 128
 33e:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN); //einschalten
 340:	80 81       	ld	r24, Z
 342:	80 68       	ori	r24, 0x80	; 128
 344:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //initialisiern
 346:	80 81       	ld	r24, Z
 348:	80 64       	ori	r24, 0x40	; 64
 34a:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC)); //erste testmessung (leer)
 34c:	80 81       	ld	r24, Z
 34e:	86 fd       	sbrc	r24, 6
 350:	fd cf       	rjmp	.-6      	; 0x34c <adc_init+0x54>
}
 352:	08 95       	ret

00000354 <__vector_41>:
	uint32_t count = 0;
	
	
//Start PWM PART////////////////////////////////////////////////////////////////////////////////////////////////
unsigned long pwmPeriod = 0;
ISR(TIMER4_OVF_vect) {}
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <setPwmDuty>:
	TCCR4D = (1<<WGM40); //set it to phase and frequency correct mode
	TCCR4C = 0;
	setPeriod(freq);
}
void setPwmDuty(unsigned int duty) {
	unsigned long dutyCycle = pwmPeriod;
 368:	20 91 12 01 	lds	r18, 0x0112
 36c:	30 91 13 01 	lds	r19, 0x0113
 370:	40 91 14 01 	lds	r20, 0x0114
 374:	50 91 15 01 	lds	r21, 0x0115
	dutyCycle *= duty;
 378:	dc 01       	movw	r26, r24
 37a:	0e 94 ae 04 	call	0x95c	; 0x95c <__muluhisi3>
	dutyCycle >>= 9;
 37e:	dc 01       	movw	r26, r24
 380:	cb 01       	movw	r24, r22
 382:	07 2e       	mov	r0, r23
 384:	79 e0       	ldi	r23, 0x09	; 9
 386:	b6 95       	lsr	r27
 388:	a7 95       	ror	r26
 38a:	97 95       	ror	r25
 38c:	87 95       	ror	r24
 38e:	7a 95       	dec	r23
 390:	d1 f7       	brne	.-12     	; 0x386 <setPwmDuty+0x1e>
 392:	70 2d       	mov	r23, r0
	TC4H = (dutyCycle) >> 8;
 394:	49 2f       	mov	r20, r25
 396:	5a 2f       	mov	r21, r26
 398:	6b 2f       	mov	r22, r27
 39a:	77 27       	eor	r23, r23
 39c:	40 93 bf 00 	sts	0x00BF, r20
	OCR4A = (dutyCycle) & 255;
 3a0:	80 93 cf 00 	sts	0x00CF, r24
 3a4:	08 95       	ret

000003a6 <start>:
}
void start() {
	TCCR4A |= _BV(COM4A1);
 3a6:	e0 ec       	ldi	r30, 0xC0	; 192
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	80 68       	ori	r24, 0x80	; 128
 3ae:	80 83       	st	Z, r24
 3b0:	08 95       	ret

000003b2 <stop>:
}
void stop()  {
	TCCR4A &= ~(_BV(COM4A1));
 3b2:	e0 ec       	ldi	r30, 0xC0	; 192
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	8f 77       	andi	r24, 0x7F	; 127
 3ba:	80 83       	st	Z, r24
 3bc:	08 95       	ret

000003be <setPeriod>:
}
void setPeriod(unsigned long freq)  {
 3be:	9b 01       	movw	r18, r22
 3c0:	ac 01       	movw	r20, r24
	unsigned long cycles = PLL_FREQ / 2 / freq;
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	76 e3       	ldi	r23, 0x36	; 54
 3c6:	8e e6       	ldi	r24, 0x6E	; 110
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 8c 04 	call	0x918	; 0x918 <__udivmodsi4>
	unsigned char clockSelectBits = 0;
	
	if (cycles < TIMER4_RESOLUTION) {
 3ce:	2f 3f       	cpi	r18, 0xFF	; 255
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	36 07       	cpc	r19, r22
 3d4:	41 05       	cpc	r20, r1
 3d6:	51 05       	cpc	r21, r1
 3d8:	50 f4       	brcc	.+20     	; 0x3ee <setPeriod+0x30>
		clockSelectBits = _BV(CS40);
		pwmPeriod = cycles;
 3da:	20 93 12 01 	sts	0x0112, r18
 3de:	30 93 13 01 	sts	0x0113, r19
 3e2:	40 93 14 01 	sts	0x0114, r20
 3e6:	50 93 15 01 	sts	0x0115, r21
void setPeriod(unsigned long freq)  {
	unsigned long cycles = PLL_FREQ / 2 / freq;
	unsigned char clockSelectBits = 0;
	
	if (cycles < TIMER4_RESOLUTION) {
		clockSelectBits = _BV(CS40);
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	71 c1       	rjmp	.+738    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles;
	} else
	if (cycles < TIMER4_RESOLUTION * 2) {
 3ee:	2e 3f       	cpi	r18, 0xFE	; 254
 3f0:	67 e0       	ldi	r22, 0x07	; 7
 3f2:	36 07       	cpc	r19, r22
 3f4:	41 05       	cpc	r20, r1
 3f6:	51 05       	cpc	r21, r1
 3f8:	80 f4       	brcc	.+32     	; 0x41a <setPeriod+0x5c>
		clockSelectBits = _BV(CS41);
		pwmPeriod = cycles / 2;
 3fa:	da 01       	movw	r26, r20
 3fc:	c9 01       	movw	r24, r18
 3fe:	b6 95       	lsr	r27
 400:	a7 95       	ror	r26
 402:	97 95       	ror	r25
 404:	87 95       	ror	r24
 406:	80 93 12 01 	sts	0x0112, r24
 40a:	90 93 13 01 	sts	0x0113, r25
 40e:	a0 93 14 01 	sts	0x0114, r26
 412:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION) {
		clockSelectBits = _BV(CS40);
		pwmPeriod = cycles;
	} else
	if (cycles < TIMER4_RESOLUTION * 2) {
		clockSelectBits = _BV(CS41);
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	5b c1       	rjmp	.+694    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 2;
	} else
	if (cycles < TIMER4_RESOLUTION * 4) {
 41a:	2c 3f       	cpi	r18, 0xFC	; 252
 41c:	6f e0       	ldi	r22, 0x0F	; 15
 41e:	36 07       	cpc	r19, r22
 420:	41 05       	cpc	r20, r1
 422:	51 05       	cpc	r21, r1
 424:	a0 f4       	brcc	.+40     	; 0x44e <setPeriod+0x90>
		clockSelectBits = _BV(CS41) | _BV(CS40);
		pwmPeriod = cycles / 4;
 426:	da 01       	movw	r26, r20
 428:	c9 01       	movw	r24, r18
 42a:	b6 95       	lsr	r27
 42c:	a7 95       	ror	r26
 42e:	97 95       	ror	r25
 430:	87 95       	ror	r24
 432:	b6 95       	lsr	r27
 434:	a7 95       	ror	r26
 436:	97 95       	ror	r25
 438:	87 95       	ror	r24
 43a:	80 93 12 01 	sts	0x0112, r24
 43e:	90 93 13 01 	sts	0x0113, r25
 442:	a0 93 14 01 	sts	0x0114, r26
 446:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 2) {
		clockSelectBits = _BV(CS41);
		pwmPeriod = cycles / 2;
	} else
	if (cycles < TIMER4_RESOLUTION * 4) {
		clockSelectBits = _BV(CS41) | _BV(CS40);
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	41 c1       	rjmp	.+642    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 4;
	} else
	if (cycles < TIMER4_RESOLUTION * 8) {
 44e:	28 3f       	cpi	r18, 0xF8	; 248
 450:	6f e1       	ldi	r22, 0x1F	; 31
 452:	36 07       	cpc	r19, r22
 454:	41 05       	cpc	r20, r1
 456:	51 05       	cpc	r21, r1
 458:	a0 f4       	brcc	.+40     	; 0x482 <setPeriod+0xc4>
		clockSelectBits = _BV(CS42);
		pwmPeriod = cycles / 8;
 45a:	da 01       	movw	r26, r20
 45c:	c9 01       	movw	r24, r18
 45e:	68 94       	set
 460:	12 f8       	bld	r1, 2
 462:	b6 95       	lsr	r27
 464:	a7 95       	ror	r26
 466:	97 95       	ror	r25
 468:	87 95       	ror	r24
 46a:	16 94       	lsr	r1
 46c:	d1 f7       	brne	.-12     	; 0x462 <setPeriod+0xa4>
 46e:	80 93 12 01 	sts	0x0112, r24
 472:	90 93 13 01 	sts	0x0113, r25
 476:	a0 93 14 01 	sts	0x0114, r26
 47a:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 4) {
		clockSelectBits = _BV(CS41) | _BV(CS40);
		pwmPeriod = cycles / 4;
	} else
	if (cycles < TIMER4_RESOLUTION * 8) {
		clockSelectBits = _BV(CS42);
 47e:	84 e0       	ldi	r24, 0x04	; 4
 480:	27 c1       	rjmp	.+590    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 8;
	} else
	if (cycles < TIMER4_RESOLUTION * 16) {
 482:	20 3f       	cpi	r18, 0xF0	; 240
 484:	6f e3       	ldi	r22, 0x3F	; 63
 486:	36 07       	cpc	r19, r22
 488:	41 05       	cpc	r20, r1
 48a:	51 05       	cpc	r21, r1
 48c:	a0 f4       	brcc	.+40     	; 0x4b6 <setPeriod+0xf8>
		clockSelectBits = _BV(CS42) | _BV(CS40);
		pwmPeriod = cycles / 16;
 48e:	da 01       	movw	r26, r20
 490:	c9 01       	movw	r24, r18
 492:	68 94       	set
 494:	13 f8       	bld	r1, 3
 496:	b6 95       	lsr	r27
 498:	a7 95       	ror	r26
 49a:	97 95       	ror	r25
 49c:	87 95       	ror	r24
 49e:	16 94       	lsr	r1
 4a0:	d1 f7       	brne	.-12     	; 0x496 <setPeriod+0xd8>
 4a2:	80 93 12 01 	sts	0x0112, r24
 4a6:	90 93 13 01 	sts	0x0113, r25
 4aa:	a0 93 14 01 	sts	0x0114, r26
 4ae:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 8) {
		clockSelectBits = _BV(CS42);
		pwmPeriod = cycles / 8;
	} else
	if (cycles < TIMER4_RESOLUTION * 16) {
		clockSelectBits = _BV(CS42) | _BV(CS40);
 4b2:	85 e0       	ldi	r24, 0x05	; 5
 4b4:	0d c1       	rjmp	.+538    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 16;
	} else
	if (cycles < TIMER4_RESOLUTION * 32) {
 4b6:	20 3e       	cpi	r18, 0xE0	; 224
 4b8:	6f e7       	ldi	r22, 0x7F	; 127
 4ba:	36 07       	cpc	r19, r22
 4bc:	41 05       	cpc	r20, r1
 4be:	51 05       	cpc	r21, r1
 4c0:	a0 f4       	brcc	.+40     	; 0x4ea <setPeriod+0x12c>
		clockSelectBits = _BV(CS42) | _BV(CS41);
		pwmPeriod = cycles / 32;
 4c2:	da 01       	movw	r26, r20
 4c4:	c9 01       	movw	r24, r18
 4c6:	68 94       	set
 4c8:	14 f8       	bld	r1, 4
 4ca:	b6 95       	lsr	r27
 4cc:	a7 95       	ror	r26
 4ce:	97 95       	ror	r25
 4d0:	87 95       	ror	r24
 4d2:	16 94       	lsr	r1
 4d4:	d1 f7       	brne	.-12     	; 0x4ca <setPeriod+0x10c>
 4d6:	80 93 12 01 	sts	0x0112, r24
 4da:	90 93 13 01 	sts	0x0113, r25
 4de:	a0 93 14 01 	sts	0x0114, r26
 4e2:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 16) {
		clockSelectBits = _BV(CS42) | _BV(CS40);
		pwmPeriod = cycles / 16;
	} else
	if (cycles < TIMER4_RESOLUTION * 32) {
		clockSelectBits = _BV(CS42) | _BV(CS41);
 4e6:	86 e0       	ldi	r24, 0x06	; 6
 4e8:	f3 c0       	rjmp	.+486    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 32;
	} else
	if (cycles < TIMER4_RESOLUTION * 64) {
 4ea:	20 3c       	cpi	r18, 0xC0	; 192
 4ec:	6f ef       	ldi	r22, 0xFF	; 255
 4ee:	36 07       	cpc	r19, r22
 4f0:	41 05       	cpc	r20, r1
 4f2:	51 05       	cpc	r21, r1
 4f4:	a0 f4       	brcc	.+40     	; 0x51e <setPeriod+0x160>
		clockSelectBits = _BV(CS42) | _BV(CS41) | _BV(CS40);
		pwmPeriod = cycles / 64;
 4f6:	da 01       	movw	r26, r20
 4f8:	c9 01       	movw	r24, r18
 4fa:	68 94       	set
 4fc:	15 f8       	bld	r1, 5
 4fe:	b6 95       	lsr	r27
 500:	a7 95       	ror	r26
 502:	97 95       	ror	r25
 504:	87 95       	ror	r24
 506:	16 94       	lsr	r1
 508:	d1 f7       	brne	.-12     	; 0x4fe <setPeriod+0x140>
 50a:	80 93 12 01 	sts	0x0112, r24
 50e:	90 93 13 01 	sts	0x0113, r25
 512:	a0 93 14 01 	sts	0x0114, r26
 516:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 32) {
		clockSelectBits = _BV(CS42) | _BV(CS41);
		pwmPeriod = cycles / 32;
	} else
	if (cycles < TIMER4_RESOLUTION * 64) {
		clockSelectBits = _BV(CS42) | _BV(CS41) | _BV(CS40);
 51a:	87 e0       	ldi	r24, 0x07	; 7
 51c:	d9 c0       	rjmp	.+434    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 64;
	} else
	if (cycles < TIMER4_RESOLUTION * 128) {
 51e:	20 38       	cpi	r18, 0x80	; 128
 520:	6f ef       	ldi	r22, 0xFF	; 255
 522:	36 07       	cpc	r19, r22
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	46 07       	cpc	r20, r22
 528:	51 05       	cpc	r21, r1
 52a:	a0 f4       	brcc	.+40     	; 0x554 <setPeriod+0x196>
		clockSelectBits = _BV(CS43);
		pwmPeriod = cycles / 128;
 52c:	da 01       	movw	r26, r20
 52e:	c9 01       	movw	r24, r18
 530:	68 94       	set
 532:	16 f8       	bld	r1, 6
 534:	b6 95       	lsr	r27
 536:	a7 95       	ror	r26
 538:	97 95       	ror	r25
 53a:	87 95       	ror	r24
 53c:	16 94       	lsr	r1
 53e:	d1 f7       	brne	.-12     	; 0x534 <setPeriod+0x176>
 540:	80 93 12 01 	sts	0x0112, r24
 544:	90 93 13 01 	sts	0x0113, r25
 548:	a0 93 14 01 	sts	0x0114, r26
 54c:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 64) {
		clockSelectBits = _BV(CS42) | _BV(CS41) | _BV(CS40);
		pwmPeriod = cycles / 64;
	} else
	if (cycles < TIMER4_RESOLUTION * 128) {
		clockSelectBits = _BV(CS43);
 550:	88 e0       	ldi	r24, 0x08	; 8
 552:	be c0       	rjmp	.+380    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 128;
	} else
	if (cycles < TIMER4_RESOLUTION * 256) {
 554:	21 15       	cp	r18, r1
 556:	6f ef       	ldi	r22, 0xFF	; 255
 558:	36 07       	cpc	r19, r22
 55a:	63 e0       	ldi	r22, 0x03	; 3
 55c:	46 07       	cpc	r20, r22
 55e:	51 05       	cpc	r21, r1
 560:	70 f4       	brcc	.+28     	; 0x57e <setPeriod+0x1c0>
		clockSelectBits = _BV(CS43) | _BV(CS40);
		pwmPeriod = cycles / 256;
 562:	bb 27       	eor	r27, r27
 564:	a5 2f       	mov	r26, r21
 566:	94 2f       	mov	r25, r20
 568:	83 2f       	mov	r24, r19
 56a:	80 93 12 01 	sts	0x0112, r24
 56e:	90 93 13 01 	sts	0x0113, r25
 572:	a0 93 14 01 	sts	0x0114, r26
 576:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 128) {
		clockSelectBits = _BV(CS43);
		pwmPeriod = cycles / 128;
	} else
	if (cycles < TIMER4_RESOLUTION * 256) {
		clockSelectBits = _BV(CS43) | _BV(CS40);
 57a:	89 e0       	ldi	r24, 0x09	; 9
 57c:	a9 c0       	rjmp	.+338    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 256;
	} else
	if (cycles < TIMER4_RESOLUTION * 512) {
 57e:	21 15       	cp	r18, r1
 580:	6e ef       	ldi	r22, 0xFE	; 254
 582:	36 07       	cpc	r19, r22
 584:	67 e0       	ldi	r22, 0x07	; 7
 586:	46 07       	cpc	r20, r22
 588:	51 05       	cpc	r21, r1
 58a:	a8 f4       	brcc	.+42     	; 0x5b6 <setPeriod+0x1f8>
		clockSelectBits = _BV(CS43) | _BV(CS41);
		pwmPeriod = cycles / 512;
 58c:	da 01       	movw	r26, r20
 58e:	c9 01       	movw	r24, r18
 590:	07 2e       	mov	r0, r23
 592:	79 e0       	ldi	r23, 0x09	; 9
 594:	b6 95       	lsr	r27
 596:	a7 95       	ror	r26
 598:	97 95       	ror	r25
 59a:	87 95       	ror	r24
 59c:	7a 95       	dec	r23
 59e:	d1 f7       	brne	.-12     	; 0x594 <setPeriod+0x1d6>
 5a0:	70 2d       	mov	r23, r0
 5a2:	80 93 12 01 	sts	0x0112, r24
 5a6:	90 93 13 01 	sts	0x0113, r25
 5aa:	a0 93 14 01 	sts	0x0114, r26
 5ae:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 256) {
		clockSelectBits = _BV(CS43) | _BV(CS40);
		pwmPeriod = cycles / 256;
	} else
	if (cycles < TIMER4_RESOLUTION * 512) {
		clockSelectBits = _BV(CS43) | _BV(CS41);
 5b2:	8a e0       	ldi	r24, 0x0A	; 10
 5b4:	8d c0       	rjmp	.+282    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 512;
	} else
	if (cycles < TIMER4_RESOLUTION * 1024) {
 5b6:	21 15       	cp	r18, r1
 5b8:	6c ef       	ldi	r22, 0xFC	; 252
 5ba:	36 07       	cpc	r19, r22
 5bc:	6f e0       	ldi	r22, 0x0F	; 15
 5be:	46 07       	cpc	r20, r22
 5c0:	51 05       	cpc	r21, r1
 5c2:	a8 f4       	brcc	.+42     	; 0x5ee <setPeriod+0x230>
		clockSelectBits = _BV(CS43) | _BV(CS41) | _BV(CS40);
		pwmPeriod = cycles / 1024;
 5c4:	da 01       	movw	r26, r20
 5c6:	c9 01       	movw	r24, r18
 5c8:	07 2e       	mov	r0, r23
 5ca:	7a e0       	ldi	r23, 0x0A	; 10
 5cc:	b6 95       	lsr	r27
 5ce:	a7 95       	ror	r26
 5d0:	97 95       	ror	r25
 5d2:	87 95       	ror	r24
 5d4:	7a 95       	dec	r23
 5d6:	d1 f7       	brne	.-12     	; 0x5cc <setPeriod+0x20e>
 5d8:	70 2d       	mov	r23, r0
 5da:	80 93 12 01 	sts	0x0112, r24
 5de:	90 93 13 01 	sts	0x0113, r25
 5e2:	a0 93 14 01 	sts	0x0114, r26
 5e6:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 512) {
		clockSelectBits = _BV(CS43) | _BV(CS41);
		pwmPeriod = cycles / 512;
	} else
	if (cycles < TIMER4_RESOLUTION * 1024) {
		clockSelectBits = _BV(CS43) | _BV(CS41) | _BV(CS40);
 5ea:	8b e0       	ldi	r24, 0x0B	; 11
 5ec:	71 c0       	rjmp	.+226    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 1024;
	} else
	if (cycles < TIMER4_RESOLUTION * 2048) {
 5ee:	21 15       	cp	r18, r1
 5f0:	68 ef       	ldi	r22, 0xF8	; 248
 5f2:	36 07       	cpc	r19, r22
 5f4:	6f e1       	ldi	r22, 0x1F	; 31
 5f6:	46 07       	cpc	r20, r22
 5f8:	51 05       	cpc	r21, r1
 5fa:	a8 f4       	brcc	.+42     	; 0x626 <setPeriod+0x268>
		clockSelectBits = _BV(CS43) | _BV(CS42);
		pwmPeriod = cycles / 2048;
 5fc:	da 01       	movw	r26, r20
 5fe:	c9 01       	movw	r24, r18
 600:	07 2e       	mov	r0, r23
 602:	7b e0       	ldi	r23, 0x0B	; 11
 604:	b6 95       	lsr	r27
 606:	a7 95       	ror	r26
 608:	97 95       	ror	r25
 60a:	87 95       	ror	r24
 60c:	7a 95       	dec	r23
 60e:	d1 f7       	brne	.-12     	; 0x604 <setPeriod+0x246>
 610:	70 2d       	mov	r23, r0
 612:	80 93 12 01 	sts	0x0112, r24
 616:	90 93 13 01 	sts	0x0113, r25
 61a:	a0 93 14 01 	sts	0x0114, r26
 61e:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 1024) {
		clockSelectBits = _BV(CS43) | _BV(CS41) | _BV(CS40);
		pwmPeriod = cycles / 1024;
	} else
	if (cycles < TIMER4_RESOLUTION * 2048) {
		clockSelectBits = _BV(CS43) | _BV(CS42);
 622:	8c e0       	ldi	r24, 0x0C	; 12
 624:	55 c0       	rjmp	.+170    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 2048;
	} else
	if (cycles < TIMER4_RESOLUTION * 4096) {
 626:	21 15       	cp	r18, r1
 628:	60 ef       	ldi	r22, 0xF0	; 240
 62a:	36 07       	cpc	r19, r22
 62c:	6f e3       	ldi	r22, 0x3F	; 63
 62e:	46 07       	cpc	r20, r22
 630:	51 05       	cpc	r21, r1
 632:	a8 f4       	brcc	.+42     	; 0x65e <setPeriod+0x2a0>
		clockSelectBits = _BV(CS43) | _BV(CS42) | _BV(CS40);
		pwmPeriod = cycles / 4096;
 634:	da 01       	movw	r26, r20
 636:	c9 01       	movw	r24, r18
 638:	07 2e       	mov	r0, r23
 63a:	7c e0       	ldi	r23, 0x0C	; 12
 63c:	b6 95       	lsr	r27
 63e:	a7 95       	ror	r26
 640:	97 95       	ror	r25
 642:	87 95       	ror	r24
 644:	7a 95       	dec	r23
 646:	d1 f7       	brne	.-12     	; 0x63c <setPeriod+0x27e>
 648:	70 2d       	mov	r23, r0
 64a:	80 93 12 01 	sts	0x0112, r24
 64e:	90 93 13 01 	sts	0x0113, r25
 652:	a0 93 14 01 	sts	0x0114, r26
 656:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 2048) {
		clockSelectBits = _BV(CS43) | _BV(CS42);
		pwmPeriod = cycles / 2048;
	} else
	if (cycles < TIMER4_RESOLUTION * 4096) {
		clockSelectBits = _BV(CS43) | _BV(CS42) | _BV(CS40);
 65a:	8d e0       	ldi	r24, 0x0D	; 13
 65c:	39 c0       	rjmp	.+114    	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 4096;
	} else
	if (cycles < TIMER4_RESOLUTION * 8192) {
 65e:	21 15       	cp	r18, r1
 660:	60 ee       	ldi	r22, 0xE0	; 224
 662:	36 07       	cpc	r19, r22
 664:	6f e7       	ldi	r22, 0x7F	; 127
 666:	46 07       	cpc	r20, r22
 668:	51 05       	cpc	r21, r1
 66a:	a8 f4       	brcc	.+42     	; 0x696 <setPeriod+0x2d8>
		clockSelectBits = _BV(CS43) | _BV(CS42) | _BV(CS41);
		pwmPeriod = cycles / 8192;
 66c:	da 01       	movw	r26, r20
 66e:	c9 01       	movw	r24, r18
 670:	07 2e       	mov	r0, r23
 672:	7d e0       	ldi	r23, 0x0D	; 13
 674:	b6 95       	lsr	r27
 676:	a7 95       	ror	r26
 678:	97 95       	ror	r25
 67a:	87 95       	ror	r24
 67c:	7a 95       	dec	r23
 67e:	d1 f7       	brne	.-12     	; 0x674 <setPeriod+0x2b6>
 680:	70 2d       	mov	r23, r0
 682:	80 93 12 01 	sts	0x0112, r24
 686:	90 93 13 01 	sts	0x0113, r25
 68a:	a0 93 14 01 	sts	0x0114, r26
 68e:	b0 93 15 01 	sts	0x0115, r27
	if (cycles < TIMER4_RESOLUTION * 4096) {
		clockSelectBits = _BV(CS43) | _BV(CS42) | _BV(CS40);
		pwmPeriod = cycles / 4096;
	} else
	if (cycles < TIMER4_RESOLUTION * 8192) {
		clockSelectBits = _BV(CS43) | _BV(CS42) | _BV(CS41);
 692:	8e e0       	ldi	r24, 0x0E	; 14
 694:	1d c0       	rjmp	.+58     	; 0x6d0 <setPeriod+0x312>
		pwmPeriod = cycles / 8192;
	} else
	if (cycles < TIMER4_RESOLUTION * 16384) {        clockSelectBits = _BV(CS43) | _BV(CS42) | _BV(CS41) | _BV(CS40);        pwmPeriod = cycles / 16384;     }  /*else           clockSelectBits = _BV(CS43) | _BV(CS42) | _BV(CS41) | _BV(CS40);        pwmPeriod = TIMER4_RESOLUTION - 1; */            TCCR4B = clockSelectBits;             TC4H = pwmPeriod >> 8;
 696:	21 15       	cp	r18, r1
 698:	60 ec       	ldi	r22, 0xC0	; 192
 69a:	36 07       	cpc	r19, r22
 69c:	6f ef       	ldi	r22, 0xFF	; 255
 69e:	46 07       	cpc	r20, r22
 6a0:	51 05       	cpc	r21, r1
 6a2:	a8 f4       	brcc	.+42     	; 0x6ce <setPeriod+0x310>
 6a4:	da 01       	movw	r26, r20
 6a6:	c9 01       	movw	r24, r18
 6a8:	07 2e       	mov	r0, r23
 6aa:	7e e0       	ldi	r23, 0x0E	; 14
 6ac:	b6 95       	lsr	r27
 6ae:	a7 95       	ror	r26
 6b0:	97 95       	ror	r25
 6b2:	87 95       	ror	r24
 6b4:	7a 95       	dec	r23
 6b6:	d1 f7       	brne	.-12     	; 0x6ac <setPeriod+0x2ee>
 6b8:	70 2d       	mov	r23, r0
 6ba:	80 93 12 01 	sts	0x0112, r24
 6be:	90 93 13 01 	sts	0x0113, r25
 6c2:	a0 93 14 01 	sts	0x0114, r26
 6c6:	b0 93 15 01 	sts	0x0115, r27
 6ca:	8f e0       	ldi	r24, 0x0F	; 15
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <setPeriod+0x312>
void stop()  {
	TCCR4A &= ~(_BV(COM4A1));
}
void setPeriod(unsigned long freq)  {
	unsigned long cycles = PLL_FREQ / 2 / freq;
	unsigned char clockSelectBits = 0;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
	} else
	if (cycles < TIMER4_RESOLUTION * 8192) {
		clockSelectBits = _BV(CS43) | _BV(CS42) | _BV(CS41);
		pwmPeriod = cycles / 8192;
	} else
	if (cycles < TIMER4_RESOLUTION * 16384) {        clockSelectBits = _BV(CS43) | _BV(CS42) | _BV(CS41) | _BV(CS40);        pwmPeriod = cycles / 16384;     }  /*else           clockSelectBits = _BV(CS43) | _BV(CS42) | _BV(CS41) | _BV(CS40);        pwmPeriod = TIMER4_RESOLUTION - 1; */            TCCR4B = clockSelectBits;             TC4H = pwmPeriod >> 8;
 6d0:	80 93 c1 00 	sts	0x00C1, r24
 6d4:	80 91 12 01 	lds	r24, 0x0112
 6d8:	90 91 13 01 	lds	r25, 0x0113
 6dc:	a0 91 14 01 	lds	r26, 0x0114
 6e0:	b0 91 15 01 	lds	r27, 0x0115
 6e4:	89 2f       	mov	r24, r25
 6e6:	9a 2f       	mov	r25, r26
 6e8:	ab 2f       	mov	r26, r27
 6ea:	bb 27       	eor	r27, r27
 6ec:	80 93 bf 00 	sts	0x00BF, r24
	OCR4C = pwmPeriod;
 6f0:	80 91 12 01 	lds	r24, 0x0112
 6f4:	80 93 d1 00 	sts	0x00D1, r24
 6f8:	08 95       	ret

000006fa <initialize>:
	TIMSK4 = 0;
}
void initialize(unsigned long freq) {
	
	/* Init the internal PLL */
	PLLFRQ = _BV(PDIV2);
 6fa:	24 e0       	ldi	r18, 0x04	; 4
 6fc:	22 bf       	out	0x32, r18	; 50
	PLLCSR = _BV(PLLE);
 6fe:	22 e0       	ldi	r18, 0x02	; 2
 700:	29 bd       	out	0x29, r18	; 41
	while(!(PLLCSR & _BV(PLOCK)));
 702:	09 b4       	in	r0, 0x29	; 41
 704:	00 fe       	sbrs	r0, 0
 706:	fd cf       	rjmp	.-6      	; 0x702 <initialize+0x8>
	PLLFRQ |= _BV(PLLTM0); /* PCK 48MHz */
 708:	22 b7       	in	r18, 0x32	; 50
 70a:	20 61       	ori	r18, 0x10	; 16
 70c:	22 bf       	out	0x32, r18	; 50
	
	TCCR4A = (1<<PWM4A);
 70e:	22 e0       	ldi	r18, 0x02	; 2
 710:	20 93 c0 00 	sts	0x00C0, r18
	TCCR4E = (1<<ENHC4);
 714:	20 e4       	ldi	r18, 0x40	; 64
 716:	20 93 c4 00 	sts	0x00C4, r18
	TCCR4D = (1<<WGM40); //set it to phase and frequency correct mode
 71a:	21 e0       	ldi	r18, 0x01	; 1
 71c:	20 93 c3 00 	sts	0x00C3, r18
	TCCR4C = 0;
 720:	10 92 c2 00 	sts	0x00C2, r1
	setPeriod(freq);
 724:	0e 94 df 01 	call	0x3be	; 0x3be <setPeriod>
 728:	08 95       	ret

0000072a <uart_print>:
	setPwmDuty(512);     // Duty cycle 0-1024, 1024 is 100%, 512 is 50%
	start();
	
}
void uart_print(const char *str)
{
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
	char c;
	while (1) {
		c = *str++;
 72e:	ec 01       	movw	r28, r24
 730:	89 91       	ld	r24, Y+
		if (!c) break;
 732:	88 23       	and	r24, r24
 734:	29 f0       	breq	.+10     	; 0x740 <uart_print+0x16>
		uart_putchar(c);
 736:	0e 94 25 04 	call	0x84a	; 0x84a <uart_putchar>
}
void uart_print(const char *str)
{
	char c;
	while (1) {
		c = *str++;
 73a:	89 91       	ld	r24, Y+
		if (!c) break;
 73c:	81 11       	cpse	r24, r1
 73e:	fb cf       	rjmp	.-10     	; 0x736 <uart_print+0xc>
		uart_putchar(c);
	}
}
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	08 95       	ret

00000746 <sleep_ms>:
		_delay_us(1);
	}
}

void sleep_ms(uint16_t ms){
	while(ms){
 746:	00 97       	sbiw	r24, 0x00	; 0
 748:	49 f0       	breq	.+18     	; 0x75c <sleep_ms+0x16>
		ms--;
 74a:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 74c:	ef e9       	ldi	r30, 0x9F	; 159
 74e:	ff e0       	ldi	r31, 0x0F	; 15
 750:	31 97       	sbiw	r30, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <sleep_ms+0xa>
 754:	00 c0       	rjmp	.+0      	; 0x756 <sleep_ms+0x10>
 756:	00 00       	nop
		_delay_us(1);
	}
}

void sleep_ms(uint16_t ms){
	while(ms){
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	b9 f7       	brne	.-18     	; 0x74a <sleep_ms+0x4>
 75c:	08 95       	ret

0000075e <main>:
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 75e:	80 e8       	ldi	r24, 0x80	; 128
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	f8 94       	cli
 766:	80 93 61 00 	sts	0x0061, r24
 76a:	90 93 61 00 	sts	0x0061, r25
 76e:	0f be       	out	0x3f, r0	; 63
int main(void)
{
	
	
	clock_prescale_set(clock_div_1);	//clock prescaler auf  1 =>  16MHz
	MCUCR = (1 << JTD);					//jtag ausschalten
 770:	85 bf       	out	0x35, r24	; 53
	DDRE |= (1 << DDE6) ;				//port e 6  als  ausgang
 772:	6e 9a       	sbi	0x0d, 6	; 13
	DDRD |= (1 << DDD5) ;				//port D5  als  ausgang
 774:	55 9a       	sbi	0x0a, 5	; 10
	DDRB = 0xff;						//alle als ausgang
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC7) ;				//alle als ausgang
 77a:	3f 9a       	sbi	0x07, 7	; 7
	DDRF = 0x00;						//alle eingang
 77c:	10 ba       	out	0x10, r1	; 16
		
	DDRD &= ~(1 << DDD0);				//eingang "Notaus"
 77e:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= (1<<PD0);					// internen Pull-Up an PD0 aktivieren
 780:	58 9a       	sbi	0x0b, 0	; 11
	
	DDRD &= ~( 1 << DDD1 );				// Eingang Laden  */
 782:	51 98       	cbi	0x0a, 1	; 10
	PORTD |= (1<<PD1);					// internen Pull-Up an PD1 aktivieren */
 784:	59 9a       	sbi	0x0b, 1	; 11

	DDRE|=(1 << PE6);
 786:	6e 9a       	sbi	0x0d, 6	; 13

	adc_init();	
 788:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <adc_init>
	

		uart_init(BAUD_RATE);
 78c:	60 e8       	ldi	r22, 0x80	; 128
 78e:	75 e2       	ldi	r23, 0x25	; 37
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <uart_init>
		uart_print("uart init done \r\n");
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	0e 94 95 03 	call	0x72a	; 0x72a <uart_print>
		sleep_ms(500);
 7a0:	84 ef       	ldi	r24, 0xF4	; 244
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_ms>
		initialize(50000);  // Frequency to generate in Hz
 7a8:	60 e5       	ldi	r22, 0x50	; 80
 7aa:	73 ec       	ldi	r23, 0xC3	; 195
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <initialize>
		setPwmDuty(512);     // Duty cycle 0-1024, 1024 is 100%, 512 is 50%
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	92 e0       	ldi	r25, 0x02	; 2
 7b8:	0e 94 b4 01 	call	0x368	; 0x368 <setPwmDuty>
		start();
 7bc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <start>
		E6_on
 7c0:	76 9a       	sbi	0x0e, 6	; 14
    while(1)   
	{
		
		
	
		stop();
 7c2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <stop>
		setPeriod(readADC(0)*10);
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	0e 94 75 00 	call	0xea	; 0xea <readADC>
 7cc:	28 2f       	mov	r18, r24
 7ce:	39 2f       	mov	r19, r25
 7d0:	22 0f       	add	r18, r18
 7d2:	33 1f       	adc	r19, r19
 7d4:	b9 01       	movw	r22, r18
 7d6:	66 0f       	add	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	66 0f       	add	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	62 0f       	add	r22, r18
 7e0:	73 1f       	adc	r23, r19
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 df 01 	call	0x3be	; 0x3be <setPeriod>
		start();
 7ea:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <start>
		sleep_ms(250);
 7ee:	8a ef       	ldi	r24, 0xFA	; 250
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_ms>
 7f6:	e5 cf       	rjmp	.-54     	; 0x7c2 <main+0x64>

000007f8 <uart_init>:
static volatile uint8_t rx_buffer_head;
static volatile uint8_t rx_buffer_tail;

// Initialize the UART
void uart_init(uint32_t baud)
{
 7f8:	9b 01       	movw	r18, r22
 7fa:	ac 01       	movw	r20, r24
	cli();
 7fc:	f8 94       	cli
	UBRR1 = (16000000 / 4 / baud - 1) / 2; // 9600 baud err: 0,16%
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	79 e0       	ldi	r23, 0x09	; 9
 802:	8d e3       	ldi	r24, 0x3D	; 61
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 8c 04 	call	0x918	; 0x918 <__udivmodsi4>
 80a:	da 01       	movw	r26, r20
 80c:	c9 01       	movw	r24, r18
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	a1 09       	sbc	r26, r1
 812:	b1 09       	sbc	r27, r1
 814:	b6 95       	lsr	r27
 816:	a7 95       	ror	r26
 818:	97 95       	ror	r25
 81a:	87 95       	ror	r24
 81c:	90 93 cd 00 	sts	0x00CD, r25
 820:	80 93 cc 00 	sts	0x00CC, r24
	//UBRR1 = 103;  //
	UCSR1A = (1<<U2X1);
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
 82a:	88 e9       	ldi	r24, 0x98	; 152
 82c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
 830:	86 e0       	ldi	r24, 0x06	; 6
 832:	80 93 ca 00 	sts	0x00CA, r24
	tx_buffer_head = tx_buffer_tail = 0;
 836:	10 92 58 01 	sts	0x0158, r1
 83a:	10 92 59 01 	sts	0x0159, r1
	rx_buffer_head = rx_buffer_tail = 0;
 83e:	10 92 16 01 	sts	0x0116, r1
 842:	10 92 17 01 	sts	0x0117, r1
	sei();
 846:	78 94       	sei
 848:	08 95       	ret

0000084a <uart_putchar>:
// Transmit a byte
void uart_putchar(uint8_t c)
{
	uint8_t i;

	i = tx_buffer_head + 1;
 84a:	20 91 59 01 	lds	r18, 0x0159
 84e:	2f 5f       	subi	r18, 0xFF	; 255
	if (i >= TX_BUFFER_SIZE) i = 0;
 850:	28 32       	cpi	r18, 0x28	; 40
 852:	08 f0       	brcs	.+2      	; 0x856 <uart_putchar+0xc>
 854:	20 e0       	ldi	r18, 0x00	; 0
	while (tx_buffer_tail == i) ; // wait until space in buffer
 856:	90 91 58 01 	lds	r25, 0x0158
 85a:	29 17       	cp	r18, r25
 85c:	e1 f3       	breq	.-8      	; 0x856 <uart_putchar+0xc>
	//cli();
	tx_buffer[i] = c;
 85e:	e2 2f       	mov	r30, r18
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	e6 5a       	subi	r30, 0xA6	; 166
 864:	fe 4f       	sbci	r31, 0xFE	; 254
 866:	80 83       	st	Z, r24
	tx_buffer_head = i;
 868:	20 93 59 01 	sts	0x0159, r18
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1) | (1<<UDRIE1);
 86c:	88 eb       	ldi	r24, 0xB8	; 184
 86e:	80 93 c9 00 	sts	0x00C9, r24
 872:	08 95       	ret

00000874 <__vector_26>:
	return RX_BUFFER_SIZE + head - tail;
}

// Transmit Interrupt
ISR(USART1_UDRE_vect)
{
 874:	1f 92       	push	r1
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	0f 92       	push	r0
 87c:	11 24       	eor	r1, r1
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	ef 93       	push	r30
 884:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
 886:	90 91 59 01 	lds	r25, 0x0159
 88a:	80 91 58 01 	lds	r24, 0x0158
 88e:	98 13       	cpse	r25, r24
 890:	04 c0       	rjmp	.+8      	; 0x89a <__vector_26+0x26>
		// buffer is empty, disable transmit interrupt
		UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
 892:	88 e9       	ldi	r24, 0x98	; 152
 894:	80 93 c9 00 	sts	0x00C9, r24
 898:	0f c0       	rjmp	.+30     	; 0x8b8 <__vector_26+0x44>
	} else {
		i = tx_buffer_tail + 1;
 89a:	80 91 58 01 	lds	r24, 0x0158
 89e:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
 8a0:	88 32       	cpi	r24, 0x28	; 40
 8a2:	08 f0       	brcs	.+2      	; 0x8a6 <__vector_26+0x32>
 8a4:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
 8a6:	e8 2f       	mov	r30, r24
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	e6 5a       	subi	r30, 0xA6	; 166
 8ac:	fe 4f       	sbci	r31, 0xFE	; 254
 8ae:	90 81       	ld	r25, Z
 8b0:	90 93 ce 00 	sts	0x00CE, r25
		tx_buffer_tail = i;
 8b4:	80 93 58 01 	sts	0x0158, r24
	}
}
 8b8:	ff 91       	pop	r31
 8ba:	ef 91       	pop	r30
 8bc:	9f 91       	pop	r25
 8be:	8f 91       	pop	r24
 8c0:	0f 90       	pop	r0
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	0f 90       	pop	r0
 8c6:	1f 90       	pop	r1
 8c8:	18 95       	reti

000008ca <__vector_25>:

// Receive Interrupt
ISR(USART1_RX_vect)
{
 8ca:	1f 92       	push	r1
 8cc:	0f 92       	push	r0
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	0f 92       	push	r0
 8d2:	11 24       	eor	r1, r1
 8d4:	2f 93       	push	r18
 8d6:	8f 93       	push	r24
 8d8:	9f 93       	push	r25
 8da:	ef 93       	push	r30
 8dc:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
 8de:	20 91 ce 00 	lds	r18, 0x00CE
	i = rx_buffer_head + 1;
 8e2:	80 91 17 01 	lds	r24, 0x0117
 8e6:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
 8e8:	80 34       	cpi	r24, 0x40	; 64
 8ea:	08 f0       	brcs	.+2      	; 0x8ee <__vector_25+0x24>
 8ec:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
 8ee:	90 91 16 01 	lds	r25, 0x0116
 8f2:	89 17       	cp	r24, r25
 8f4:	39 f0       	breq	.+14     	; 0x904 <__vector_25+0x3a>
		rx_buffer[i] = c;
 8f6:	e8 2f       	mov	r30, r24
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	e8 5e       	subi	r30, 0xE8	; 232
 8fc:	fe 4f       	sbci	r31, 0xFE	; 254
 8fe:	20 83       	st	Z, r18
		rx_buffer_head = i;
 900:	80 93 17 01 	sts	0x0117, r24
	}
}
 904:	ff 91       	pop	r31
 906:	ef 91       	pop	r30
 908:	9f 91       	pop	r25
 90a:	8f 91       	pop	r24
 90c:	2f 91       	pop	r18
 90e:	0f 90       	pop	r0
 910:	0f be       	out	0x3f, r0	; 63
 912:	0f 90       	pop	r0
 914:	1f 90       	pop	r1
 916:	18 95       	reti

00000918 <__udivmodsi4>:
 918:	a1 e2       	ldi	r26, 0x21	; 33
 91a:	1a 2e       	mov	r1, r26
 91c:	aa 1b       	sub	r26, r26
 91e:	bb 1b       	sub	r27, r27
 920:	fd 01       	movw	r30, r26
 922:	0d c0       	rjmp	.+26     	; 0x93e <__udivmodsi4_ep>

00000924 <__udivmodsi4_loop>:
 924:	aa 1f       	adc	r26, r26
 926:	bb 1f       	adc	r27, r27
 928:	ee 1f       	adc	r30, r30
 92a:	ff 1f       	adc	r31, r31
 92c:	a2 17       	cp	r26, r18
 92e:	b3 07       	cpc	r27, r19
 930:	e4 07       	cpc	r30, r20
 932:	f5 07       	cpc	r31, r21
 934:	20 f0       	brcs	.+8      	; 0x93e <__udivmodsi4_ep>
 936:	a2 1b       	sub	r26, r18
 938:	b3 0b       	sbc	r27, r19
 93a:	e4 0b       	sbc	r30, r20
 93c:	f5 0b       	sbc	r31, r21

0000093e <__udivmodsi4_ep>:
 93e:	66 1f       	adc	r22, r22
 940:	77 1f       	adc	r23, r23
 942:	88 1f       	adc	r24, r24
 944:	99 1f       	adc	r25, r25
 946:	1a 94       	dec	r1
 948:	69 f7       	brne	.-38     	; 0x924 <__udivmodsi4_loop>
 94a:	60 95       	com	r22
 94c:	70 95       	com	r23
 94e:	80 95       	com	r24
 950:	90 95       	com	r25
 952:	9b 01       	movw	r18, r22
 954:	ac 01       	movw	r20, r24
 956:	bd 01       	movw	r22, r26
 958:	cf 01       	movw	r24, r30
 95a:	08 95       	ret

0000095c <__muluhisi3>:
 95c:	0e 94 b9 04 	call	0x972	; 0x972 <__umulhisi3>
 960:	a5 9f       	mul	r26, r21
 962:	90 0d       	add	r25, r0
 964:	b4 9f       	mul	r27, r20
 966:	90 0d       	add	r25, r0
 968:	a4 9f       	mul	r26, r20
 96a:	80 0d       	add	r24, r0
 96c:	91 1d       	adc	r25, r1
 96e:	11 24       	eor	r1, r1
 970:	08 95       	ret

00000972 <__umulhisi3>:
 972:	a2 9f       	mul	r26, r18
 974:	b0 01       	movw	r22, r0
 976:	b3 9f       	mul	r27, r19
 978:	c0 01       	movw	r24, r0
 97a:	a3 9f       	mul	r26, r19
 97c:	01 d0       	rcall	.+2      	; 0x980 <__umulhisi3+0xe>
 97e:	b2 9f       	mul	r27, r18
 980:	70 0d       	add	r23, r0
 982:	81 1d       	adc	r24, r1
 984:	11 24       	eor	r1, r1
 986:	91 1d       	adc	r25, r1
 988:	08 95       	ret

0000098a <_exit>:
 98a:	f8 94       	cli

0000098c <__stop_program>:
 98c:	ff cf       	rjmp	.-2      	; 0x98c <__stop_program>
